myfib2(thresh=150)
myfib2(1000000)
myfib3 <- function(thresh){
fibseq <- c(1,1)
counter <- 2
repeat{
fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
counter <- counter+1
if(fibseq[counter]>thresh){
break
}
}
return(fibseq)
}
myfib3(150)
foo <- myfib3(10000)
foo
 bar <- foo[1:5]
bar
dummy1 <- function(){
aa <- 2.5
bb <- "string me along"
cc <- "string 'em up"
dd <- 4:8
}
dummy2 <- function(){
aa <- 2.5
bb <- "string me along"
cc <- "string 'em up"
dd <- 4:8
return(dd)
}
 foo <- dummy1()
foo
bar <- dummy2()
bar
dummy3 <- function(){
aa <- 2.5
bb <- "string me along"
return(aa)
cc <- "string 'em up"
dd <- 4:8
return(bb)
}
baz <- dummy3()
baz
multiples1 <- function(x,mat,str1,str2){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
return(str2)
} else {
return(result)
}
}
 foo <- list(matrix(1:4,2,2),"not a matrix",
"definitely not a matrix",matrix(1:8,2,4),matrix(1:8,4,2))
bar <- list(1:4,"not a matrix",c(F,T,T,T),"??")
 baz <- list(1:4,"not a matrix",c(F,T,T,T),"??",matrix(1:8,2,4))
multiples1(x=foo,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=bar,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=baz,mat=diag(2),str1="no matrices in 'x'",
str2="matrices in 'x' but none of appropriate dimensions given
'mat'")
multiples1(x=foo,mat=diag(2))
multiples1(x=bar,mat=diag(2))
multiples2 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
return(str2)
} else {
return(result)
}
}
 multiples2(foo,mat=diag(2))
multiples2(bar,mat=diag(2))
multiples2(baz,mat=diag(2))
multiples3 <- function(x,mat,str1,str2){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
if(missing(str1)){
return("'str1' was missing, so this is the message")
} else {
return(str1)
}
}
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
if(counter==0){
if(missing(str2)){
return("'str2' was missing, so this is the message")
} else {
return(str2)
}
} else {
return(result)
}
}
multiples3(foo,diag(2))
multiples3(bar,diag(2))
multiples3(baz,diag(2))
myfibplot <- function(thresh,plotit=TRUE,...){
fibseq <- c(1,1)
counter <- 2
repeat{
fibseq <- c(fibseq,fibseq[counter-1]+fibseq[counter])
counter <- counter+1
if(fibseq[counter]>thresh){
break
}
}
if(plotit){
plot(1:length(fibseq),fibseq,...)
} else {
return(fibseq)
}
}
myfibplot(150)
myfibplot(150,type="b",pch=4,lty=2,main="Terms of the Fibonacci sequence",
ylab="Fibonacci number",xlab="Term (n)")
unpackme <- function(...){
x <- list(...)
cat("Here is ... in its entirety as a list:\n")
print(x)
cat("\nThe names of ... are:",names(x),"\n\n")
cat("\nThe classes of ... are:",sapply(x,class))
}
unpackme(aa=matrix(1:4,2,2),bb=TRUE,cc=c("two","strings"),
dd=factor(c(1,1,2,1)))
multiples_helper_ext <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
multiples4 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
helper.call <- multiples_helper_ext(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
multiples5 <- function(x,mat,str1="no valid matrices",str2=str1){
matrix.flags <- sapply(x,FUN=is.matrix)
if(!any(matrix.flags)){
return(str1)
}
multiples_helper_int <- function(x,matrix.flags,mat){
indexes <- which(matrix.flags)
counter <- 0
result <- list()
for(i in indexes){
temp <- x[[i]]
if(ncol(temp)==nrow(mat)){
counter <- counter+1
result[[counter]] <- temp%*%mat
}
}
return(list(result,counter))
}
helper.call <- multiples_helper_int(x,matrix.flags,mat)
result <- helper.call[[1]]
counter <- helper.call[[2]]
if(counter==0){
return(str2)
} else {
return(result)
}
}
foo <- matrix(c(2,3,3,4,2,4,7,3,3,6,7,2),3,4)
foo
apply(foo,MARGIN=2,FUN=function(x){sort(rep(x,2))})
myfibrec <- function(n){
if(n==1||n==2){
return(1)
} else {
return(myfibrec(n-1)+myfibrec(n-2))
}
}
myfibrec(5)
 foo <- list(1:3,matrix(c(3.3,3.2,2.8,2.1,4.6,4.5,3.1,9.4),4,2),
matrix(c(3.3,3.2,2.8,2.1,4.6,4.5,3.1,9.4),2,4))
geolist(foo)
bar <- list(1:9,matrix(1:9,1,9),matrix(1:9,9,1),matrix(1:9,3,3))
 geolist(bar)
warn_test <- function(x){
if(x<=0){
warning("'x' is less than or equal to 0 but setting it to 1 and
continuing")
x <- 1
}
return(5/x)
}
error_test <- function(x){
if(x<=0){
stop("'x' is less than or equal to 0... TERMINATE")
}
return(5/x)
}
warn_test(0)
 error_test(0)
myfibrec2 <- function(n){
if(n<0){
warning("Assuming you meant 'n' to be positive -- doing that instead")
n <- n*-1
} else if(n==0){
stop("'n' is uninterpretable at 0")
}
if(n==1||n==2){
return(1)
} else {
return(myfibrec2(n-1)+myfibrec2(n-2))
}
}
myfibrec2(6)
 myfibrec2(-3)
myfibrec2(0)
attempt1 <- try(myfibrec2(0),silent=TRUE)
 attempt1
attempt2 <- try(myfibrec2(6),silent=TRUE)
attempt2
myfibvector <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
result[i] <- myfibrec2(nvec[i])
}
return(result)
}
 foo <- myfibvector(nvec=c(1,2,10,8))
foo
 bar <- myfibvector(nvec=c(3,2,7,0,9,13))
myfibvectorTRY <- function(nvec){
nterms <- length(nvec)
result <- rep(0,nterms)
for(i in 1:nterms){
attempt <- try(myfibrec2(nvec[i]),silent=T)
if(class(attempt)=="try-error"){
result[i] <- NA
} else {
result[i] <- attempt
}
}
return(result)
}
baz <- myfibvectorTRY(nvec=c(3,2,7,0,9,13))
baz
attempt3 <- try(myfibrec2(-3),silent=TRUE)
attempt3
attempt4 <- suppressWarnings(myfibrec2(-3))
attempt4
 Sys.sleep(3)
sleep_test <- function(n){
result <- 0
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
}
return(result)
}
sleep_test(8)
prog_test <- function(n){
result <- 0
progbar <- txtProgressBar(min=0,max=n,style=1,char="=")
for(i in 1:n){
result <- result + 1
Sys.sleep(0.5)
setTxtProgressBar(progbar,value=i)
}
close(progbar)
return(result)
}
prog_test(8)
Sys.time()
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
t1 <- Sys.time()
Sys.sleep(3)
t2 <- Sys.time()
t2-t1
search()
foo <- c(4,1.5,3)
sum(foo)
sum <- function(x){
result <- 0
for(i in 1:length(x)){
result <- result + x[i]^2
}
return(result)
}
sum(foo)
base::sum(foo)
rm(sum)
library("spatstat")
install.package("spatstat")
install.packages("spatstat")
library("spatstat")
library("car")
cats <- "meow"
library("MASS")
 search()
detach("package:car",unload=TRUE)
 search()
foo <- data.frame(surname=c("a","b","c","d"),
sex=c(0,1,1,0),height=c(170,168,181,180),
stringsAsFactors=F)
foo
attach(foo)
search()
surname
bar <- data.frame(surname=c("e","f","g","h"),
sex=c(1,0,1,0),weight=c(55,70,87,79),
stringsAsFactors=F)
bar
attach(bar)
search()
 height
detach(foo)
search()
save.image("C:\\Users\\junie\\Desktop\\10-12")
q()
chickwts
 chickwts[1:5,]
chickwts$weight
 chickwts$feed
quakes[1:5,]
plot(quakes$long,quakes$lat,xlab="Longitude",ylab="Latitude")
xdata <- c(2,4.4,3,3,2,2.2,2,4)
x.bar <- mean(xdata)
x.bar
m.bar <- median(xdata)
m.bar
xtab <- table(xdata)
xtab
min(xdata)
max(xdata)
 range(xdata)
max(xtab)
d.bar <- xtab[xtab==max(xtab)]
d.bar
mean(chickwts$weight)
median(chickwts$weight)
Qtab <- table(quakes$mag)
Qtab[Qtab==max(Qtab)]
mean(c(1,4,NA))
 mean(c(1,4,NaN))
mean(c(1,4,NA),na.rm=TRUE)
mean(chickwts$weight[chickwts$feed=="casein"])
 mean(chickwts$weight[chickwts$feed=="horsebean"])
mean(chickwts$weight[chickwts$feed=="linseed"])
mean(chickwts$weight[chickwts$feed=="meatmeal"])
 mean(chickwts$weight[chickwts$feed=="soybean"])
mean(chickwts$weight[chickwts$feed=="sunflower"])
tapply(chickwts$weight,INDEX=chickwts$feed,FUN=mean)
table(chickwts$feed)
 table(chickwts$feed)/nrow(chickwts)
 sum(chickwts$feed=="soybean")/nrow(chickwts)
mean(chickwts$feed=="soybean")
mean(chickwts$feed=="soybean"|chickwts$feed=="horsebean")
tapply(chickwts$weight,INDEX=chickwts$feed,
FUN=function(x) length(x)/nrow(chickwts))
round(table(chickwts$feed)/nrow(chickwts),digits=3)
 round(mean(chickwts$feed=="soybean")*100,1)
 xdata <- c(2,4.4,3,3,2,2.2,2,4)
quantile(xdata,prob=0.8)
quantile(xdata,prob=c(0,0.25,0.5,0.75,1))
summary(xdata)
quantile(chickwts$weight,prob=c(0.25,0.75))
 summary(quakes$mag[quakes$depth<400])
xdata <- c(2,4.4,3,3,2,2.2,2,4)
ydata <- c(1,4.4,1,3,2,2.2,2,7)
mean(xdata)
mean(ydata)
 plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
 abline(h=c(3,3.5),lty=2,col="gray")
abline(v=2.825,lwd=2,lty=3)
 abline(h=c(3,3.5),lty=2,col="gray")
text(c(0.8,0.8),c(3,3.5),labels=c("x","y"))
 points(jitter(c(xdata,ydata)),c(rep(3,length(xdata)),
rep(3.5,length(ydata))))
plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n")
plot(xdata,type="n",xlab="",ylab="data vector",yaxt="n",bty="n") abline(h=c(3,3.5),lty=2,col="gray")  abline(v=2.825,lwd=2,lty=3)text(c(0.8,0.8),c(3,3.5),labels=c("x","y")) points(jitter(c(xdata,ydata)),c(rep(3,length(xdata)),
rep(3.5,length(ydata))))
 var(xdata)
sd(xdata)
IQR(xdata)
sqrt(var(xdata))
as.numeric(quantile(xdata,0.75)-quantile(xdata,0.25))
sd(ydata)
 IQR(ydata)
sd(chickwts$weight)
IQR(quakes$mag[quakes$depth<400])
xdata <- c(2,4.4,3,3,2,2.2,2,4)
ydata <- c(1,4.4,1,3,2,2.2,2,7)
cov(xdata,ydata)
cov(xdata,ydata)/(sd(xdata)*sd(ydata))
cor(xdata,ydata)
plot(xdata,ydata,pch=13,cex=1.5)
 plot(quakes$mag,quakes$stations,xlab="Magnitude",ylab="No. of stations")
cov(quakes$mag,quakes$stations)
cor(quakes$mag,quakes$stations)
foo <- c(0.6,-0.6,0.1,-0.2,-1.0,0.4,0.3,-1.8,1.1,6.0)
 plot(foo,rep(0,10),yaxt="n",ylab="",bty="n",cex=2,cex.axis=1.5,cex.lab=1.5)
abline(h=0,col="gray",lty=2)
 arrows(5,0.5,5.9,0.1,lwd=2)
text(5,0.7,labels="outlier?",cex=3)
bar <- c(0.1,0.3,1.3,0.6,0.2,-1.7,0.8,0.9,-0.8,-1.0)
baz <- c(-0.3,0.9,2.8,2.3,1.2,-4.1,-0.4,4.1,-2.3,-100.0)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)
arrows(-0.5,-80,-0.94,-97,lwd=2)
text(-0.45,-74,labels="outlier?",cex=3)
plot(bar,baz,axes=T,cex=2,cex.axis=1.5,cex.lab=1.5)+arrows(-0.5,-80,-0.94,-97,lwd=2)+text(-0.45,-74,labels="outlier?",cex=3)
 plot(foo,rep(0,10),yaxt="n",ylab="",bty="n",cex=2,cex.axis=1.5,cex.lab=1.5)+abline(h=0,col="gray",lty=2)+arrows(5,0.5,5.9,0.1,lwd=2)+text(5,0.7,labels="outlier?",cex=3)
mean(foo)
mean(foo[-10])
cor(bar,baz)
 cor(bar[-10],baz[-10])
mtcars[1:5,]
cyl.freq <- table(mtcars$cyl)
cyl.freq
barplot(cyl.freq)
 table(mtcars$cyl[mtcars$am==0])
table(mtcars$cyl[mtcars$am==1])'
table(mtcars$cyl[mtcars$am==1])
d
d
s
dvs
vs
vds
q
we
..
.
s
e
ve
v
d
vs
vtable(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
table(mtcars$cyl[mtcars$am==1])
 cyl.freq.matrix <- table(mtcars$am,mtcars$cyl)
q
q
q
q
q
=
=
/
